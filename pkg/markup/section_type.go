// Code generated by "enumer -type=Section -output=section_type.go -linecomment"; DO NOT EDIT.

//
package markup

import (
	"fmt"
)

const _SectionName = "HEADERBINARY LOADERSCRIPTBOOTSTRAPINITFINALIZE"

var _SectionIndex = [...]uint8{0, 6, 19, 25, 34, 38, 46}

func (i Section) String() string {
	if i >= Section(len(_SectionIndex)-1) {
		return fmt.Sprintf("Section(%d)", i)
	}
	return _SectionName[_SectionIndex[i]:_SectionIndex[i+1]]
}

var _SectionValues = []Section{0, 1, 2, 3, 4, 5}

var _SectionNameToValueMap = map[string]Section{
	_SectionName[0:6]:   0,
	_SectionName[6:19]:  1,
	_SectionName[19:25]: 2,
	_SectionName[25:34]: 3,
	_SectionName[34:38]: 4,
	_SectionName[38:46]: 5,
}

// SectionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SectionString(s string) (Section, error) {
	if val, ok := _SectionNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Section values", s)
}

// SectionValues returns all values of the enum
func SectionValues() []Section {
	return _SectionValues
}

// IsASection returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Section) IsASection() bool {
	for _, v := range _SectionValues {
		if i == v {
			return true
		}
	}
	return false
}
