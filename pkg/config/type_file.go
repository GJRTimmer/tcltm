// Code generated by "enumer -type=FileType -output=type_file.go -yaml -trimprefix=FileType -linecomment"; DO NOT EDIT.

//
package config

import (
	"fmt"
)

const _FileTypeName = "scriptbinary"

var _FileTypeIndex = [...]uint8{0, 6, 12}

func (i FileType) String() string {
	if i >= FileType(len(_FileTypeIndex)-1) {
		return fmt.Sprintf("FileType(%d)", i)
	}
	return _FileTypeName[_FileTypeIndex[i]:_FileTypeIndex[i+1]]
}

var _FileTypeValues = []FileType{0, 1}

var _FileTypeNameToValueMap = map[string]FileType{
	_FileTypeName[0:6]:  0,
	_FileTypeName[6:12]: 1,
}

// FileTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FileTypeString(s string) (FileType, error) {
	if val, ok := _FileTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FileType values", s)
}

// FileTypeValues returns all values of the enum
func FileTypeValues() []FileType {
	return _FileTypeValues
}

// IsAFileType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FileType) IsAFileType() bool {
	for _, v := range _FileTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalYAML implements a YAML Marshaler for FileType
func (i FileType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for FileType
func (i *FileType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = FileTypeString(s)
	return err
}
