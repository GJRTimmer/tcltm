// Code generated by "enumer -type=FileAction -output=type_action.go -yaml -trimprefix=FileAction -linecomment"; DO NOT EDIT.

//
package config

import (
	"fmt"
)

const _FileActionName = "nonerunload"

var _FileActionIndex = [...]uint8{0, 4, 7, 11}

func (i FileAction) String() string {
	if i >= FileAction(len(_FileActionIndex)-1) {
		return fmt.Sprintf("FileAction(%d)", i)
	}
	return _FileActionName[_FileActionIndex[i]:_FileActionIndex[i+1]]
}

var _FileActionValues = []FileAction{0, 1, 2}

var _FileActionNameToValueMap = map[string]FileAction{
	_FileActionName[0:4]:  0,
	_FileActionName[4:7]:  1,
	_FileActionName[7:11]: 2,
}

// FileActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FileActionString(s string) (FileAction, error) {
	if val, ok := _FileActionNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FileAction values", s)
}

// FileActionValues returns all values of the enum
func FileActionValues() []FileAction {
	return _FileActionValues
}

// IsAFileAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FileAction) IsAFileAction() bool {
	for _, v := range _FileActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalYAML implements a YAML Marshaler for FileAction
func (i FileAction) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for FileAction
func (i *FileAction) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = FileActionString(s)
	return err
}
