// Code generated by "enumer -type=Template -output=template_type.go -yaml -trimprefix=Template -linecomment"; DO NOT EDIT.

//
package license

import (
	"fmt"
)

const _TemplateName = "0BSDAFLv3AGPLv3APACHEv2ARTISTICv2BSD2-CLAUSEBSD3-CLAUSEBSD3-CLEAR-CLEARBSLCCv4CCSAv4CC0v1CECILLv21ECLv2EPLv1EPLv2EUPLv11EUPLv12GPLv3ISCLGPLv21LGPLv3LPPLv13MITMPLv2MSPLMSRLNCSAODBLv1OFLv11OSLv3UNLICENSEUPLv1WTFPLZLIB"

var _TemplateIndex = [...]uint8{0, 4, 9, 15, 23, 33, 44, 55, 71, 74, 78, 84, 89, 98, 103, 108, 113, 120, 127, 132, 135, 142, 148, 155, 158, 163, 167, 171, 175, 181, 187, 192, 201, 206, 211, 215}

func (i Template) String() string {
	if i >= Template(len(_TemplateIndex)-1) {
		return fmt.Sprintf("Template(%d)", i)
	}
	return _TemplateName[_TemplateIndex[i]:_TemplateIndex[i+1]]
}

var _TemplateValues = []Template{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34}

var _TemplateNameToValueMap = map[string]Template{
	_TemplateName[0:4]:     0,
	_TemplateName[4:9]:     1,
	_TemplateName[9:15]:    2,
	_TemplateName[15:23]:   3,
	_TemplateName[23:33]:   4,
	_TemplateName[33:44]:   5,
	_TemplateName[44:55]:   6,
	_TemplateName[55:71]:   7,
	_TemplateName[71:74]:   8,
	_TemplateName[74:78]:   9,
	_TemplateName[78:84]:   10,
	_TemplateName[84:89]:   11,
	_TemplateName[89:98]:   12,
	_TemplateName[98:103]:  13,
	_TemplateName[103:108]: 14,
	_TemplateName[108:113]: 15,
	_TemplateName[113:120]: 16,
	_TemplateName[120:127]: 17,
	_TemplateName[127:132]: 18,
	_TemplateName[132:135]: 19,
	_TemplateName[135:142]: 20,
	_TemplateName[142:148]: 21,
	_TemplateName[148:155]: 22,
	_TemplateName[155:158]: 23,
	_TemplateName[158:163]: 24,
	_TemplateName[163:167]: 25,
	_TemplateName[167:171]: 26,
	_TemplateName[171:175]: 27,
	_TemplateName[175:181]: 28,
	_TemplateName[181:187]: 29,
	_TemplateName[187:192]: 30,
	_TemplateName[192:201]: 31,
	_TemplateName[201:206]: 32,
	_TemplateName[206:211]: 33,
	_TemplateName[211:215]: 34,
}

// TemplateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TemplateString(s string) (Template, error) {
	if val, ok := _TemplateNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Template values", s)
}

// TemplateValues returns all values of the enum
func TemplateValues() []Template {
	return _TemplateValues
}

// IsATemplate returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Template) IsATemplate() bool {
	for _, v := range _TemplateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalYAML implements a YAML Marshaler for Template
func (i Template) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Template
func (i *Template) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = TemplateString(s)
	return err
}
