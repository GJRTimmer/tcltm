// Code generated by "enumer -type=SPDX -output=spdx_type.go -yaml -trimprefix=SPDX -linecomment"; DO NOT EDIT.

//
package license

import (
	"fmt"
)

const _SPDXName = "0BSDAFLv3AGPLv3APACHEv2ARTISTICv2BSD2-CLAUSEBSD3-CLAUSEBSD3-CLEAR-CLEARBSLCCv4CCSAv4CC0v1CECILLv21ECLv2EPLv1EPLv2EUPLv11EUPLv12GPLv3ISCLGPLv21LGPLv3LPPLv13MITMPLv2MSPLMSRLNCSAODBLv1OFLv11OSLv3UNLICENSEUPLv1WTFPLZLIB"

var _SPDXIndex = [...]uint8{0, 4, 9, 15, 23, 33, 44, 55, 71, 74, 78, 84, 89, 98, 103, 108, 113, 120, 127, 132, 135, 142, 148, 155, 158, 163, 167, 171, 175, 181, 187, 192, 201, 206, 211, 215}

func (i SPDX) String() string {
	if i >= SPDX(len(_SPDXIndex)-1) {
		return fmt.Sprintf("SPDX(%d)", i)
	}
	return _SPDXName[_SPDXIndex[i]:_SPDXIndex[i+1]]
}

var _SPDXValues = []SPDX{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34}

var _SPDXNameToValueMap = map[string]SPDX{
	_SPDXName[0:4]:     0,
	_SPDXName[4:9]:     1,
	_SPDXName[9:15]:    2,
	_SPDXName[15:23]:   3,
	_SPDXName[23:33]:   4,
	_SPDXName[33:44]:   5,
	_SPDXName[44:55]:   6,
	_SPDXName[55:71]:   7,
	_SPDXName[71:74]:   8,
	_SPDXName[74:78]:   9,
	_SPDXName[78:84]:   10,
	_SPDXName[84:89]:   11,
	_SPDXName[89:98]:   12,
	_SPDXName[98:103]:  13,
	_SPDXName[103:108]: 14,
	_SPDXName[108:113]: 15,
	_SPDXName[113:120]: 16,
	_SPDXName[120:127]: 17,
	_SPDXName[127:132]: 18,
	_SPDXName[132:135]: 19,
	_SPDXName[135:142]: 20,
	_SPDXName[142:148]: 21,
	_SPDXName[148:155]: 22,
	_SPDXName[155:158]: 23,
	_SPDXName[158:163]: 24,
	_SPDXName[163:167]: 25,
	_SPDXName[167:171]: 26,
	_SPDXName[171:175]: 27,
	_SPDXName[175:181]: 28,
	_SPDXName[181:187]: 29,
	_SPDXName[187:192]: 30,
	_SPDXName[192:201]: 31,
	_SPDXName[201:206]: 32,
	_SPDXName[206:211]: 33,
	_SPDXName[211:215]: 34,
}

// SPDXString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SPDXString(s string) (SPDX, error) {
	if val, ok := _SPDXNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SPDX values", s)
}

// SPDXValues returns all values of the enum
func SPDXValues() []SPDX {
	return _SPDXValues
}

// IsASPDX returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SPDX) IsASPDX() bool {
	for _, v := range _SPDXValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalYAML implements a YAML Marshaler for SPDX
func (i SPDX) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for SPDX
func (i *SPDX) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = SPDXString(s)
	return err
}
